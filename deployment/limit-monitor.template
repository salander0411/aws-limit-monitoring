# cf-templates-1hc09qho4b94m
#
# template for cf-templates-1hc09qho4b94m
# **DO NOT DELETE**
#
# author: aws-solutions-builder@
AWSTemplateFormatVersion: 2010-09-09

Description: (SO0005) - The AWS CloudFormation template for deployment of the cf-templates-1hc09qho4b94m. Version limit-monitor - Master Template

Parameters:
  # Email address to receive alerts
  SNSEmail:
    Description: 订阅 SNS 的email地址。如果不需要 SNS email通知，留空。
    Type: String

  # Accounts where limits need to be audited
  AccountList:
    Description: 账号ID列表，如果只部署在一个账号下，此项留空。如果希望联合部署在两个以及两个以上的账户中，此主账号以及二级账号的ID都要填上，格式为引号包裹单个账号ID，并用逗号分隔。如"12345678910","10987654321。
    Type: String
    AllowedPattern: '^"\d{12}"(,"\d{12}")*$|(^\s*)$'

  # Events for SNS notification
  SNSEvents:
    Type: String
    Default: '"WARN","ERROR"'
    Description: email 通知的级别。默认情况下，只接受 WARN (80% limit) 以及 ERROR（已经达到limit） 两种类型的通知。如果不需要 SNS email 通知，此项留空。

  Account:
    Description: 本账号ID
    Type: String

  Username:
    Description: IAM 用户名。此IAM用户需要有查看 AWS EC2 Limit的权限，，且只需要这个权限
    Type: String

  Password:
    Description: IAM 用户名对应的密码。此IAM用户需要有查看AWS EC2 Limit的权限，，且只需要这个权限
    Type: String
    NoEcho: True

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Account Configuration
        Parameters:
          - AccountList
          - Account
          - Username
          - Password
      - Label:
          default: Notification Configuration
        Parameters:
          - SNSEvents
          - SNSEmail
    ParameterLabels:
      Account:
        default: 本账号ID
      AccountList:
        default: 账号ID列表
      Username:
        default: IAM 用户名
      Password:
        default: IAM 密码
      SNSEmail:
        default: Email 地址
      SNSEvents:
        default: Email 通知登记


Mappings:
  MetricsMap:
    Send-Data:
      SendAnonymousData: "No" # change to 'No' if needed

  RefreshRate:
    CronSchedule:
      Default: rate(1 day) # change as needed

  SourceCode:
    General:
      S3Bucket: cf-templates-1hc09qho4b94m
      KeyPrefix: "limit-monitor/v3.0"
      TemplateBucket: cf-templates-1hc09qho4b94m

  EventsMap:
    Checks:
      #Services: '"AutoScaling","CloudFormation","DynamoDB","EBS","EC2","ELB","IAM","Kinesis","RDS","Route53","SES","VPC"' #change if needed
      Services: '"AutoScaling","CloudFormation","DynamoDB","EBS","EC2","ELB","IAM","Kinesis","RDS","SES","VPC"'

Conditions:
  SingleAccnt: !Equals [!Ref AccountList, ""]
  SNSTrue: !Not [!Equals [!Ref SNSEvents, ""]]
  AnonymousMetric:
    !Equals [!FindInMap [MetricsMap, Send-Data, SendAnonymousData], "Yes"]

Resources:
  #
  # Limit Monitor Cloudwatch Rules
  # [TASQSRule, TASNSRule]
  #
  TASQSRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Limit Monitor Solution - Rule for TA SQS events
      EventPattern: !Join
        - ""
        - - '{"account":['
          - !If
            - SingleAccnt
            - !Join
              - ""
              - - '"'
                - !Ref AWS::AccountId
                - '"'
            - !Ref AccountList
          - "],"
          - '"source":["aws.trustedadvisor", "limit-monitor-solution"],'
          - '"detail-type":["Trusted Advisor Check Item Refresh Notification", "Limit Monitor Checks"],'
          - '"detail":{'
          - '"status":['
          - '"OK","WARN","ERROR"'
          - "],"
          - '"check-item-detail":{'
          - '"Service":['
          - !FindInMap [EventsMap, Checks, Services]
          - "]"
          - "}"
          - "}"
          - "}"
      State: ENABLED
      Targets:
        - Arn: !Sub ${EventQueue.Arn}
          Id: LimitMonitorSQSTarget

  TASNSRule:
    Type: AWS::Events::Rule
    Condition: SNSTrue
    Properties:
      Description: Limit Monitor Solution - Rule for TA SNS events
      EventPattern: !Join
        - ""
        - - '{"account":['
          - !If
            - SingleAccnt
            - !Join
              - ""
              - - '"'
                - !Ref AWS::AccountId
                - '"'
            - !Ref AccountList
          - "],"
          - '"source":["aws.trustedadvisor", "limit-monitor-solution"],'
          - '"detail-type":["Trusted Advisor Check Item Refresh Notification", "Limit Monitor Checks"],'
          - '"detail":{'
          - '"status":['
          - !Ref SNSEvents
          - "],"
          - '"check-item-detail":{'
          - '"Service":['
          - !FindInMap [EventsMap, Checks, Services]
          - "]"
          - "}"
          - "}"
          - "}"
      State: ENABLED
      # SO-Limit-M-41 - 07/30/2018 - Input transformer
      # Using transformer to make SNS notification readable
      Targets:
        - Arn: !Sub ${SNSTopic}
          Id: LimitMonitorSNSTarget
          InputTransformer:
            InputPathsMap:
              limitdetails: "$.detail.check-item-detail"
              time: "$.time"
              account: "$.account"
            InputTemplate: '"AWS-Account : <account> || Timestamp : <time> || Limit-Details : <limitdetails>"'


  #
  # Limit summarizer resources
  # [EventQueue, DeadLetterQueue, EventQueuePolicy, QueuePollSchedule,
  # SummarizerInvokePermission, LimitSummarizer, LimitSummarizerRole, SummaryDDB]
  #
  EventQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref LimitMonitorEncryptionKey
      RedrivePolicy:
        deadLetterTargetArn: !Sub ${DeadLetterQueue.Arn}
        maxReceiveCount: 3
      VisibilityTimeout: 60
      MessageRetentionPeriod: 86400 #1 day retention

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref LimitMonitorEncryptionKey
      MessageRetentionPeriod: 604800 #7 day retention

  EventQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Id: LimitMonitorSQSPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: LimitMonitorCWEventsAccess
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs:SendMessage
            Resource: !Sub ${EventQueue.Arn}
      Queues:
        - !Ref EventQueue

  QueuePollSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: Limit Monitor Solution - Schedule to poll SQS queue
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Arn: !Sub ${LimitSummarizer.Arn}
          Id: SqsPollRate

  SummarizerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub ${LimitSummarizer}
      Action: lambda:InvokeFunction
      Principal: !Sub events.amazonaws.com
      SourceArn: !Sub ${QueuePollSchedule.Arn}

  LimitSummarizer:
    Type: AWS::Lambda::Function
    Properties:
      Description: Serverless Limit Monitor - Lambda function to summarize service limit usage
      Environment:
        Variables:
          LIMIT_REPORT_TBL: !Sub ${SummaryDDB}
          SQS_URL: !Sub ${EventQueue}
          MAX_MESSAGES: 10 #100 messages can be read with each invocation, change as needed
          MAX_LOOPS: 10
          #ANONYMOUS_DATA: !FindInMap [MetricsMap, Send-Data, SendAnonymousData]
          SOLUTION: "SO0005"
          UUID: !Sub ${CreateUUID.UUID}
          LOG_LEVEL: "INFO" #change to WARN, ERROR or DEBUG as needed
      Handler: index.handler
      Role: !Sub ${LimitSummarizerRole.Arn}
      Code:
        S3Bucket:
          !Join [
            "-",
            [
              !FindInMap ["SourceCode", "General", "S3Bucket"],
              Ref: "AWS::Region",
            ],
          ]
        S3Key:
          !Join [
            "/",
            [
              !FindInMap ["SourceCode", "General", "KeyPrefix"],
              "limtr-report-service.zip",
            ],
          ]
      Runtime: nodejs12.x
      Timeout: 300

  LimitSummarizerRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Override the IAM role to allow support:* for logs:PutLogEvents resource on its permissions policy
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub Limit-Monitor-Policy-${AWS::StackName}-${AWS::Region}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws-cn:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ReceiveMessage
                Resource:
                  - !Sub ${EventQueue.Arn}
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource:
                  - !Sub arn:aws-cn:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${SummaryDDB}
              - Effect: Allow
                Action:
                  - kms:GenerateDataKey*
                  - kms:Decrypt
                Resource: "*"

  SummaryDDB:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain # retaining DDB after stack deletion
    Properties:
      SSESpecification:
        SSEEnabled: true
      AttributeDefinitions:
        - AttributeName: TimeStamp
          AttributeType: S
        - AttributeName: MessageId
          AttributeType: S
      KeySchema:
        - AttributeName: MessageId
          KeyType: HASH
        - AttributeName: TimeStamp
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      Tags:
        - Key: Solution
          Value: Serverless-Limit-Monitor
      TimeToLiveSpecification:
        AttributeName: ExpiryTime
        Enabled: true

  # KMS

  LimitMonitorEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Key for SNS and SQS
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Statement:
          - Sid: "default"
            Effect: "Allow"
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action: "kms:*"
            Resource: "*"
          - Sid: "Allows event bridge to the kms key"
            Effect: "Allow"
            Principal:
              Service: events.amazonaws.com
            Action:
              - kms:GenerateDataKey*
              - kms:Decrypt
            Resource: "*"

  LimitMonitorEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/limit-monitor-encryption-key
      TargetKeyId: !Ref LimitMonitorEncryptionKey
  #
  # Email notification resources
  # [SNSTopic, SNSTopicPolicy]
  #
  SNSTopic:
    Type: AWS::SNS::Topic
    Condition: SNSTrue
    Properties:
      # Converted to email to make more readable
      KmsMasterKeyId: !Ref LimitMonitorEncryptionKey
      Subscription:
        - Protocol: email
          Endpoint: !Sub ${SNSEmail}

  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Condition: SNSTrue
    Properties:
      PolicyDocument:
        Id: LimitMonitorSNSPolicy
        Version: "2012-10-17"
        Statement:
          - Sid: LimitMonitorCWEventsAccess
            Effect: Allow
            Principal:
              Service: !Sub events.amazonaws.com
            Action: sns:Publish
            Resource: "*"
      Topics:
        - !Ref SNSTopic

  #
  # TA refresh resources
  # [TARefreshSchedule, TARefresher, TARefresherRole, TARefresherInvokePermission]
  #
  TARefreshSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: Limit Monitor Solution - Schedule to refresh TA checks
      ScheduleExpression: !FindInMap [RefreshRate, CronSchedule, Default]
      State: ENABLED
      Targets:
        - Arn: !Sub ${TARefresher.Arn}
          Id: TARefreshRate

  TARefresher:
    Type: AWS::Lambda::Function
    Properties:
      Description: Serverless Limit Monitor - Lambda function to summarize service limits
      Environment:
        Variables:
          AWS_SERVICES: !FindInMap [EventsMap, Checks, Services]
          LOG_LEVEL: "INFO" #change to WARN, ERROR or DEBUG as needed
      Handler: index.handler
      Role: !Sub ${TARefresherRole.Arn}
      Code:
        S3Bucket:
          !Join [
            "-",
            [
              !FindInMap ["SourceCode", "General", "S3Bucket"],
              Ref: "AWS::Region",
            ],
          ]
        S3Key:
          !Join [
            "/",
            [
              !FindInMap ["SourceCode", "General", "KeyPrefix"],
              "limtr-refresh-service.zip",
            ],
          ]
      Runtime: nodejs12.x
      Timeout: 300

  TARefresherRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: Override the IAM role to allow support:* resource on its permissions policy
          - id: W11
            reason: Override the IAM role to allow Resource:* for logs:PutLogEvents, resource on its permissions policy
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub Limit-Monitor-Refresher-Policy-${AWS::StackName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws-cn:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
              - Effect: Allow
                Action:
                  - support:*
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - servicequotas:GetAWSDefaultServiceQuota
                Resource:
                  - "*"

  TARefresherInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub ${TARefresher}
      Action: lambda:InvokeFunction
      Principal: !Sub events.amazonaws.com
      SourceArn: !Sub ${TARefreshSchedule.Arn}

  #
  # Helper resources
  # LimtrHelperFunction, GetUUID, EstablishTrust,
  # AccountAnonymousData, SSMParameter, LimtrHelperRole
  #
  LimtrHelperFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Environment:
        Variables:
          LOG_LEVEL: "INFO" #change to WARN, ERROR or DEBUG as needed
      Code:
        S3Bucket:
          !Join [
            "-",
            [
              !FindInMap ["SourceCode", "General", "S3Bucket"],
              Ref: "AWS::Region",
            ],
          ]
        S3Key:
          !Join [
            "/",
            [
              !FindInMap ["SourceCode", "General", "KeyPrefix"],
              "limtr-helper-service.zip",
            ],
          ]
      Runtime: nodejs12.x
      Timeout: 300
      Description: This function generates UUID, establishes cross account trust on CloudWatch Event Bus and sends anonymous metric
      Role: !Sub ${LimtrHelperRole.Arn}

  CreateUUID:
    Type: Custom::UUID
    Properties:
      ServiceToken: !GetAtt LimtrHelperFunction.Arn

  EstablishTrust:
    Type: Custom::CrossAccntTrust
    Properties:
      ServiceToken: !GetAtt LimtrHelperFunction.Arn
      SUB_ACCOUNTS: !Ref AccountList


  AccountAnonymousData:
    Type: Custom::AnonymousData
    Condition: AnonymousMetric
    Properties:
      ServiceToken: !GetAtt LimtrHelperFunction.Arn
      SOLUTION: "SO0005"
      UUID: !Sub ${CreateUUID.UUID}
      SNS_EVENTS: !If [SNSTrue, "true", "false"]
      SUB_ACCOUNTS: !Ref AccountList
      VERSION: limit-monitor
      TA_REFRESH_RATE: !FindInMap [RefreshRate, CronSchedule, Default]

  DeploymentData:
    Type: Custom::DeploymentData
    Properties:
      ServiceToken: !GetAtt LimtrHelperFunction.Arn
      SOLUTION: "SO0005"
      UUID: !Sub ${CreateUUID.UUID}
      VERSION: limit-monitor
      ANONYMOUS_DATA: !FindInMap [MetricsMap, Send-Data, SendAnonymousData]

  LimtrHelperRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Override the IAM role to allow support:* for logs:PutLogEvents resource on its permissions policy
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: Custom_Limtr_Helper_Permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws-cn:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
              - Effect: Allow
                Action:
                  - events:PutPermission
                  - events:RemovePermission
                Resource: !Sub arn:aws-cn:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:PutParameter
                Resource: !Sub arn:aws-cn:ssm:${AWS::Region}:${AWS::AccountId}:parameter/* # restrict as needed

  SSMParameterAccount:
      Type: AWS::SSM::Parameter
      Properties:
        Name: "ACCOUNT"
        Type: "String"
        Value: !Ref Account

  SSMParameterUsername:
        Type: AWS::SSM::Parameter
        Properties:
          Name: "USERNAME"
          Type: "String"
          Value: !Ref Username
  SSMParameterUsername:
           Type: AWS::SSM::Parameter
           Properties:
             Name: "PASSWORD"
             Type: "String"
             Value: !Ref Password

  limitCheckStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub
        - "https://s3.${AWS::Region}.amazonaws.com.cn/${S3Bucket}/${KeyPrefix}/service-quotas-checks.template"
        - S3Bucket: !FindInMap ["SourceCode", "General", "TemplateBucket"]
          KeyPrefix: !FindInMap ["SourceCode", "General", "KeyPrefix"]
      Parameters:
        Account: !Ref Account
        Username: !Ref Username
        Password: !Ref Password

Outputs:
  ServiceChecks:
    Description: Service limits monitored in the account
    Value: !FindInMap [EventsMap, Checks, Services]

  AccountList:
    Description: Accounts to be monitored for service limits
    Value: !Ref AccountList


  UUID:
    Description: UUID for the deployment
    Value: !Sub ${CreateUUID.UUID}
